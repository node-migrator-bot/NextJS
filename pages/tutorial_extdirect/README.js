Ext.data.JsonP.tutorial_extdirect({
    "guide": [

        '<h1>ExtDirectルータ - NX.DirectAction</h1>',
        '<p>',
        'Ext JSのExtDirectを利用するには、いくつかサーバーサイドで準備すべきことがあります。',
        'ポーリングの場合は、単純に定期的にリクエストするインタフェースを準備するだけです。',
        'しかしRPCの場合は、そうはいきません。',
        '「サーバーサイドの呼び出せるメソッドの名前の一覧」「メソッドの引数の数」などをAPIとしてクライアント側(Ext JS)に伝えるための',
        'JSONを作成しなくてはなりません。',
        'さらには、実際にRPCを行うためのルータとなるインタフェースも準備する必要があります。',
        'ExtDirectは、一定時間のリクエストをまとめてルーターに送信してくれて、',
        'Ext.Ajaxを利用してサーバーサイドの処理を行わせるよりも高速で、かつ柔軟な通信設計が行えます。',
        'Ext JSにおけるExt Directの情報が少ないことと、サーバー側の準備の敷居の高さに、存在は知っていても',
        '導入を見送っているユーザーも多いようです。',
        'Next JSでは、これらのサーバーサイドの設定をほとんどすることなく、ExtDirectを利用することができます。',
        '</p>',

        '<h2>ポーリング</h2>',
        '<p>',
        'まずは、ポーリング処理を行って見ましょう。',
        'ポーリングとは、一定時間ごとに決まったインタフェースに対してリクエストを投げ続ける仕組みです。',
        '</p>',

        '<h4>クライアントコード</h4>',
        '<pre>',
        'Ext.Direct.addProvider({' + "\n",
        '    url: <span style="color:#009900;">\'polling.html\'</span>,' + "\n",
        '    type: <span style="color:#009900;">\'polling\'</span>,' + "\n",
        '    onData: <span style="color:#000099;">function</span>(o, flag, ret) {' + "\n",
        '        console.log(Ext.decode(ret.responseText));' + "\n",
        '    }' + "\n",
        '});',
        '</pre>',

        '<h4>polling.js</h4>',
        '<pre>',
        'module.exports = [{' + "\n",
        '    execute: <span style="color:#000099;">function</span>() {' + "\n",
        '        <span style="color:#000099;">var</span> res = <span style="color:#000099;">this</span>.res;' + "\n",
        '        <span style="color:#000099;">var</span> ret = {' + "\n",
        '            <span style="color:#009900;">&quot;type&quot;</span>:<span style="color:#009900;">&quot;event&quot;</span>,' + "\n",
        '            <span style="color:#009900;">&quot;name&quot;</span>:<span style="color:#009900;">&quot;hogehoge&quot;</span>,' + "\n",
        '            <span style="color:#009900;">&quot;data&quot;</span>:{' + "\n",
        '                <span style="color:#009900;">&quot;foo&quot;</span>:<span style="color:#009900;">&quot;bar&quot;</span>' + "\n",
        '            }' + "\n",
        '        };' + "\n",
        '        res.writeHead(<span style="color:#009900;">200</span>);' + "\n",
        '        res.end(NX.JSON.encode(ret));' + "\n",
        '        <span style="color:#000099;">this</span>.abort(<span style="color:#000099;">false</span>);' + "\n",
        '    }' + "\n",
        '}];',
        '</pre>',

        '<p>',
        'polling.htmlに対して一定感覚でリクエストを投げ続けます。',
        'サーバーサイドでは、<em>ret</em>に格納されている形のJSONを返却するだけです。',
        'クライアントサイドへデータを受け渡しする場合は、retのdataキー以下に、必要なデータを格納します。',
        'クライアントサイドで、Ext.Direct.addProviderにてポーリングプロバイダーを追加するときに、onDateにコールバック関数を設定し、',
        '第三引数のオブジェクトのresponseTextをJSONデコードすることで、サーバーサイドが返却したデータを参照することができます。',
        '</p>',

        '<h2>RPC(Remote Procedure Call)</h2>',

        '<p>',
        'なんといっても、Ext Directといえば、RPCではないでしょうか。',
        'ポーリングは、仕様も簡単で取っつきやすいのですが、Ext Directの通信がまとめられる点以外は、',
        'setIntervalで繰り返しExt.Ajaxを呼び出すことと差がほとんどありません。',
        'RPCは、Next JSにおいて<em>モジュールのメソッドを直接呼び出すことができる仕組み</em>になります。',
        'では、その手順を一つずつみていきましょう。',
        '</p>',

        '<h3>NX.DirectAction</h3>',

        '<p>',
        'RPCを利用するためには、polling同様プロバイダーを定義する必要があります。',
        'Next JSでは、NX.DirectActionを利用することで、このリモーティングプロバイダー定義を行うための',
        'オブジェクトを自動的に生成することができます。',
        '</p>',

        '<h4>rpc.js</h4>',
        '<pre>',
        'module.exports = NX.create(\'NX.DirectAction\', {' + "\n",
        '    uses: [\'logic\']' + "\n",
        '});',
        '</pre>',

        '<p>',
        'ここで利用するモジュールは、先に作成したlogicモジュールを使用します。',
        'ちょうど、データベースからユーザー一覧を取得する<em>getUsers</em>メソッドを持っています。',
        '</p>',

        '<p>',
        '次に、RPCを利用するページ(ここでは、index.html)で、JavaScriptとしてrpc.htmlを読み込みます。',
        '</p>',

        '<pre>',
        '<span style="color:#0000FF;">&lt;script <span style="color:#000000;">src=</span><span style="color:#009900;">&quot;rpc.html&quot;</span>&gt;</span><span style="color:#0000FF;">&lt;/script&gt;</span>',
        '</pre>',

        '<p>',
        '読み込むことで、<em>Ext.app.REMOTING_API</em>というオブジェクトが作成されます。',
        '早速そのオブジェクトをプロバイダーとして登録しましょう。',
        '</p>',

        '<h4>クライアントコード</h4>',
        '<pre>',
        'Ext.Direct.addProvider(Ext.app.REMOTING_API);' + "\n",
        'logic.getUsers(<span style="color:#000099;">function</span>(rs) {' + "\n",
        '    Ext.<span style="color:#000099;">each</span>(rs, <span style="color:#000099;">function</span>(item) {' + "\n",
        '        alert(item.id + <span style="color:#009900;">\':\'</span> + item.name);' + "\n",
        '    });' + "\n",
        '});',
        '</pre>',

        '<p>',
        'プロバイダーに登録すると、すぐにモジュール名のオブジェクトがグローバルスコープに作成されます。',
        '先ほど<em>logic</em>モジュールを読み込んだので、<em>logic</em>オブジェクトが作成されています。',
        'このオブジェクト＝サーバーサイドのlogicモジュールクラスです。',
        '従って、getUsersメソッドを呼び出すことができます。',
        'getUsersの引数は0個なので、コールバック関数は、第一引数になります。',
        'コールバック関数の引数が、getUsersを呼び出した結果のオブジェクトが渡されます。',
        '</p>',

        '<p>',
        'このようにして、サーバーサイドのモジュールをクライアントサイドから手軽に利用することができます。',
        'Ext Directの機能として直接グリッドやツリーなどに設定することで、一つずつコールバックを設定しなくても',
        '直接コンポーネントに登録や、更新処理をさせることも可能です。',
        '</p>',

        '<p>',
        'どうですか？簡単でしょ？',
        '</p>',

        '<address>Copyright &copy; 2006 - 2011 <a href="http://www.xenophy.com/">Xenophy.CO.,LTD</a> All rights Reserved.</address>',

        ].join("")
    });
