Ext.data.JsonP.tutorial_action({
    "guide": [

        '<h1>アクションとアクションチェーン</h1>',
        '<p>',
        'サーバーを起動して、HTMLを表示できる状態になると、同時にアクションを実行することができる環境が整っています。',
        'まずは、HTML、そしてアクションをまとめて<em>仮想スクリーン</em>という考え方で表示されていることを説明します。',
        '</p>',

        '<h2>仮想スクリーン</h2>',
        '<p>',
        '仮想スクリーンとは、１ページ１ページの表示を行うための画面とのことを指します。',
        '例えば、index.htmlというページを一つの仮想スクリーンと考えることができます。',
        '仮想スクリーンは、<em>アクション</em>と呼ばれる処理単位が存在し、<em>public</em>ディレクトリに静的HTMLを配置して',
        'アクセスした場合は、アクションは何も処理されずHTMLが表示されます。',
        '<em>アクションは、後から開発者が差し込んで行くもの</em>です。',
        'もちろん、慣れてきて先にアクションを記述することも可能です。',
        'このとき、最終的に出力されるHTMLは、内部的にテンプレートとして扱われます。',
        '</p>',
        '<p>',
        '仮想スクリーンは、言わば<em>アクション+テンプレート</em>であるといえます。',
        '</p>',

        '<h3>仮想スクリーンがあることによって、何がうれしいか。</h3>',
        '<p>',
        '通常のMVCフレームワークの場合、開発者がコントローラーをアクセスされるファイルに記述するところから、作業を始まります。',
        'Next JSのフレームワーク機能は、Next JSがURLを元に内部でコントローラーを自動的に生成して、アクションを実行、',
        'そして、最終的にテンプレートを出力します。',
        '自動的にHTMLがテンプレートとして出力されるため、まずHTMLから作成し始めることができます。',
        'つまり、プログラマではなくWebデザイナー（またはHTMLコーダー）が、まずファイルを配置してモック版のシステム、サイトを構築することができます。',
        'プログラマは、後から必要な箇所に必要なだけアクションを差し込んでいき、',
        'HTMLが表示されるよりも前の処理を記述していきます。',
        '</p>',

        '<h3>ファイル名はアクション名</h3>',
        '<p>',
        '仮想スクリーンは、アクセスされたURLのファイル名を<em>アクション名</em>として認識します。',
        '<em>index.html</em>, <em>index.js</em>, <em>index.jpg</em>、これらは、すべて<em>index</em>というアクション名になります。',
        '認識したアクション名を元にアクションを実行して、テンプレートを出力します。',
        'アクションは、任意の処理を行い、テンプレートへ渡すことができます。',
        '単純なHTMLでも、テンプレートタグさえ記載すれば、変数の埋め込みや繰り返しが簡単に行うことができます。',
        '</p>',


        '<h2>アクションを記述する</h2>',
        '<p>',
        'まずは、index.htmlを配置して、indexアクションを実行するための、アクションファイルを記述します。',
        'アクションファイルは、server.jsと同じディレクトリに<em>actions</em>というディレクトリに下に作成します。',
        '<em>public</em>と<em>actions</em>のディレクトリ構造は、同じディレクトリ階層として扱われます。',
        '<em>foo/index.html</em>のindexアクションの場合、actions以下に、<em>foo/index.js</em>を作成することになります。',
        '</p>',
        '<p>',
        'actionsディレクトリ下に、index.jsを作成します。',
        '</p>',

        '<pre>',
        'module.exports = {' + "\n",
        '    execute: <span style="color:#000099;">function</span>() {' + "\n",
        '        <span style="color:#000099;">this</span>.<span style="color:#000099;">set</span>(<span style="color:#009900;">\'mykey\'</span>, <span style="color:#009900;">\'myvalue\'</span>);' + "\n",
        '        <span style="color:#000099;">this</span>.end();' + "\n",
        '    }' + "\n",
        '};' + "\n",
        '</pre>',

        '<p>',
        '次に、publicディレクトリ下にindex.htmlを作成します。',
        '</p>',

        '<pre>',
        '<span style="color:#0000FF;">&lt;html&gt;</span>' + "\n",
        '<span style="color:#0000FF;">&lt;head&gt;</span>' + "\n",
        '    <span style="color:#0000FF;">&lt;meta <span style="color:#000000;">http-equiv=</span><span style="color:#009900;">&quot;Content-Type&quot;</span> <span style="color:#000000;">content=</span><span style="color:#009900;">&quot;text/html; charset=utf8&quot;</span>&gt;</span>' + "\n",
        '    <span style="color:#0000FF;">&lt;title&gt;</span>Next JS HTML表示テスト<span style="color:#0000FF;">&lt;/title&gt;</span>' + "\n",
        '<span style="color:#0000FF;">&lt;/head&gt;</span>' + "\n",
        '<span style="color:#0000FF;">&lt;body&gt;</span>' + "\n",
        '    <span style="color:#0000FF;">&lt;p&gt;</span>mykeyの値:<span style="color:#990000;">&lt;!--{mykey}--&gt;</span><span style="color:#0000FF;">&lt;/p&gt;</span>' + "\n",
        '<span style="color:#0000FF;">&lt;/body&gt;</span>' + "\n",
        '<span style="color:#0000FF;">&lt;/html&gt;</span>' + "\n",
        '</pre>',

        '<p>',
        '早速、ブラウザからindex.htmlにアクセスしてみましょう。',
        '</p>',

        '<pre>',
        'mykeyの値:myvalue',
        '</pre>',

        '<p>',
        '&lt;!--{mykey}--&gt;の部分が<em>myvalue</em>になっています',
        'これでアクションが実行されていることが確認できました。',
        'では、index.jsの中を見ていきましょう。',
        '</p>',
        '<p>',
        'moduke.exportsにオブジェクトリテラルでアクションを定義しています。',
        'このオブジェクトリテラルに、<em>execute</em>というキーを作成して、そこに関数オブジェクトを指定します。',
        'これで該当のアクション名が指定されたときに、executeに指定した関数オブジェクトが呼びされるようになります。',
        'このexecuteに指定した関数オブジェクトをexecuteメソッドと呼びます。',
        'executeメソッドは、必ず<em>this.end();</em>を呼び出す必要があります。',
        'これは、ほとんどの場合nodeでプログラムを記述するとコールバック関数により処理が記載されるため、',
        'executeメソッドが同期的に終了したからといって、開発者が意図するタイミングで終了となるわけではないため、',
        '開発者が明示的に終了ポイントを定義する必要があります。',
        '</p>',
        '<p>',
        'さらに<em>this.set([key], [value]);</em>、を呼び出すことで、アクション内での処理結果を、テンプレートに引き渡すことができます。',
        'このように、アクションは、任意の処理を行い、終了ポイントを定義する。そして、その間に処理結果を格納する。という処理を記述し、アプリケーションを構築します。',
        '</p>',


        '<h2>アクションチェーン</h2>',
        '<p>',
        'さて、アクションを実行することに成功したら、次にアクションチェーンの仕組みを理解してください。',
        '先ほどのアクションは、１つしか実行できませんでした。',
        'つまり、１つの仮想スクリーンを表示するのに、１つのアクションしか実行できないことになります。',
        '１つの仮想スクリーンを表示するときに、複数のアクションを実行する仕組みをアクションチェーンといいます。',
        'ともかく、アクションチェーンの定義を見てみましょう。',
        '</p>',

        '<p>',
        '先ほど定義したindex.jsを次のように変更します。',
        '</p>',

        '<pre>',
        'module.exports = [{' + "\n",
        '    execute: <span style="color:#000099;">function</span>() {' + "\n",
        '        <span style="color:#000099;">this</span>.<span style="color:#000099;">set</span>(<span style="color:#009900;">\'mykey\'</span>, <span style="color:#009900;">\'myvalue\'</span>);' + "\n",
        '        <span style="color:#000099;">this</span>.end();' + "\n",
        '    }' + "\n",
        '},{' + "\n",
        '    execute: <span style="color:#000099;">function</span>() {' + "\n",
        '        <span style="color:#000099;">this</span>.<span style="color:#000099;">set</span>(<span style="color:#009900;">\'foo\'</span>, <span style="color:#009900;">\'bar\'</span>);' + "\n",
        '        <span style="color:#000099;">this</span>.end();' + "\n",
        '    }' + "\n",
        '}];',
        '</pre>',

        '<p>',
        'HTMLには、fooを出力するように追記します。',
        '</p>',

        '<pre>',
        '<span style="color:#0000FF;">&lt;html&gt;</span>' + "\n",
        '<span style="color:#0000FF;">&lt;head&gt;</span>' + "\n",
        '    <span style="color:#0000FF;">&lt;meta <span style="color:#000000;">http-equiv=</span><span style="color:#009900;">&quot;Content-Type&quot;</span> <span style="color:#000000;">content=</span><span style="color:#009900;">&quot;text/html; charset=utf8&quot;</span>&gt;</span>' + "\n",
        '    <span style="color:#0000FF;">&lt;title&gt;</span>Next JS HTML表示テスト<span style="color:#0000FF;">&lt;/title&gt;</span>' + "\n",
        '<span style="color:#0000FF;">&lt;/head&gt;</span>' + "\n",
        '<span style="color:#0000FF;">&lt;body&gt;</span>' + "\n",
        '    <span style="color:#0000FF;">&lt;p&gt;</span>mykeyの値:<span style="color:#990000;">&lt;!--{mykey}--&gt;</span><span style="color:#0000FF;">&lt;/p&gt;</span>' + "\n",
        '    <span style="color:#0000FF;">&lt;p&gt;</span>fooの値:<span style="color:#990000;">&lt;!--{foo}--&gt;</span><span style="color:#0000FF;">&lt;/p&gt;</span>' + "\n",
        '<span style="color:#0000FF;">&lt;/body&gt;</span>' + "\n",
        '<span style="color:#0000FF;">&lt;/html&gt;</span>' + "\n",
        '</pre>',

        '<p>',
        'ブラウザからindex.htmlにアクセスしてみましょう。',
        '</p>',

        '<pre>',
        'mykeyの値:myvalue' + "\n",
        'fooの値:bar' + "\n",
        '</pre>',

        '<p>',
        'module.exportsに対して、オブジェクトリテラルを指定していましたが、配列を指定して、',
        'オブジェクトリテラルを指定することで、配列の設定順に次々アクションを実行します。',
        '</p>',

        '<h3>アクション間でデータの共有</h3>',
        '<p>',
        '先ほど2つのアクションを順番に実行する設定を学びました。',
        '1つ目のアクションの結果に応じて、2つ目アクションの動作を変化させるためには、',
        'アクション間でデータを共有する必要があります。',
        '<em>this.res.result</em>にアクセスすることで、そこまでのthis.setされたKey/Valueが格納されています。',
        '共有データを格納するために特別なことをする必要はありません。',
        'まだ、<em>this.res.result</em>に直接データを書き込むようなことは避けるべきです。',
        '</p>',

        '<p>',
        '先ほどのアクションチェーンの２つ目のアクションを次のように変更することで、',
        '１つ目のアクションで設定した値を取得できることが確認できます。',
        '</p>',

        '<pre>',
        '<span style="color:#000099;">this</span>.<span style="color:#000099;">set</span>(<span style="color:#009900;">\'foo\'</span>, <span style="color:#009900;">\'first action &quot;mykey&quot; is \'</span> + <span style="color:#000099;">this</span>.res.result[<span style="color:#009900;">\'mykey\'</span>]);',
        '</pre>',

        '<h2>アクションの中断</h2>',
        '<p>',
        '先ほどのアクションチェーンで複数のアクションを設定することはできるようになりましたが、',
        '条件により、以降のアクションを実行したくない場合、<em>this.res.result</em>の値で判定して処理を実行させない、などの対処もできますが',
        '<em>this.abort()</em>を利用することで、メソッドをコールした時点でアクションの処理を中断することができます。',
        'メソッドの扱いとしては、<em>this.end()</em>と同じ種類のメソッドになりますが、',
        '次のアクションへ進まないというのが、<em>this.abort()</em>の特徴です。',
        '</p>',

        '<pre>',
        'module.exports = [{' + "\n",
        '    execute: <span style="color:#000099;">function</span>() {' + "\n",
        '        <span style="color:#000099;">this</span>.<span style="color:#000099;">set</span>(<span style="color:#009900;">\'mykey\'</span>, <span style="color:#009900;">\'myvalue\'</span>);' + "\n",
        '        <span style="color:#000099;">this</span>.abort();</span> <span style="color:#990000;">// ここでアクション終了</span>' + "\n",
        '    }' + "\n",
        '},{' + "\n",
        '    <span style="color:#990000;">// このアクションは実行されない</span>' + "\n",
        '    execute: <span style="color:#000099;">function</span>() {' + "\n",
        '        <span style="color:#000099;">this</span>.<span style="color:#000099;">set</span>(<span style="color:#009900;">\'foo\'</span>, <span style="color:#009900;">\'first action &quot;mykey&quot; is \'</span> + <span style="color:#000099;">this</span>.res.result[<span style="color:#009900;">\'mykey\'</span>]);' + "\n",
        '        <span style="color:#000099;">this</span>.end();' + "\n",
        '    }' + "\n",
        '}];',
        '</pre>',

        '<!--<h2>アクセスの禁止</h2>',
        '<p>',
        '後のベーシック認証で利用しますが、条件によりHTTPのステータスコードを200ではなく、',
        '403で返却したい場合に、<em>this.forbidden()</em>でアクションを停止させることができます。',
        '<en>this.abort</em>と、<em>this.end</em>と同じ種類のメソッドになります。',
        'forbiddenメソッドが呼び出された時点で、アクションは中断しコントローラーの処理に戻ります。',
        'しかし、アクション内の以降の処理も処理されますので、注意してください。',
        '</p>-->',

        '<h2>リダイレクト</h2>',
        '<p>',
        'アクション内でリダイレクトを行う場合、this.redirectメソッドを利用します。',
        '</p>',
        '<pre>',
        '<span style="color:#000099;">this</span>.redirect(<span style="color:#009900;">\'http://www.xenophy.com/\'</span>);',
        '</pre>',
        '<p>',
        'メソッドの種類的には、endやabortと変わりません。',
        'リダイレクトの処理（HTTPヘッダーの返却）を行いますし、コントローラーの次の処理へ移行しますが、',
        'redirectを呼び出した後の処理も実行されますので、注意してください。',
        '</p>',

        '<h2>変数の確認</h2>',
        '<p>',
        'ここまでで、アクション内の変数を確認したいときに、クライアントサイドの場合console.logなどを利用して',
        '変数内の状態を確認するのが一般的です。',
        'nodeにもconsole.logが実装されているため、そのまま利用できますが、あくまで標準出力に出力されるだけであって、',
        'ブラウザで確認ができるわけでは、ありません。',
        '</p>',

        '<h2>ベーシック認証</h2>',
        '<p>',
        'アクション内でベーシック認証をかける場合の手順を説明します。',
        '</p>',

        '<h4>index.js</h4>',
        '<pre>',
        'module.exports = [{' + "\n",
        '    execute: <span style="color:#000099;">function</span>() {' + "\n",
        '        <span style="color:#000099;">var</span> me = <span style="color:#000099;">this</span>;' + "\n",
        '        me.basicAuth(<span style="color:#000099;">function</span>(user, pw) {' + "\n",
        '            <span style="color:#000099;">if</span>(user === <span style="color:#009900;">&quot;kotsutsumi&quot;</span> &amp;&amp; pw === <span style="color:#009900;">&quot;pass&quot;</span>) {' + "\n",
        '                me.end();' + "\n",
        '            } <span style="color:#000099;">else</span> {' + "\n",
        '                me.forbidden();' + "\n",
        '            }' + "\n",
        '        });' + "\n",
        '    }' + "\n",
        '}];',
        '</pre>',

        '<p>',
        'basicAuthメソッドを呼び出すだけです。',
        '引数には、ブラウザから入力されたIDとパスワードが引き渡されます。',
        'また、endの他に、<em>forbidden</em>メソッドを呼び出すと、ブラウザに対して403を送信することができます。',
        '</p>',

        '<p>',
        '上記の場合だと、ページに対してベーシック認証をかけていますが、ディレクトリに対して、サイト全体に対してという場合は、',
        'グローバルアクション、エクテントアクションでbasicAuthを実装してください。',
        '</p>',



        '<address>Copyright &copy; 2006 - 2011 <a href="http://www.xenophy.com/">Xenophy.CO.,LTD</a> All rights Reserved.</address>',

        ].join("")
    });
