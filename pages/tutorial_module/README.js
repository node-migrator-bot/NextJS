Ext.data.JsonP.tutorial_module({
    "guide": [

        '<h1>モジュールの利用</h1>',
        '<p>',
        'ここまで学んだ内容で、Webアプリケーションを作っていくことは可能ですが、',
        'そうすると、画面の制御やビジネスロジックを、すべてアクション内に記述することになってしまいます。',
        'Next JSでは、リクエストされた情報によりどのような処理を行うかの判定までは、アクションで行うこととし、',
        'ビジネスロジックは、モジュールといわれる仕組みで処理することを推奨しています。',
        'せっかくモジュールが使えても、アクションにビジネスロジックを書き込んでしまうと、',
        '再利用性が失われるだけでなく、コントローラーファット(Controller Fat)な状態になり',
        'メンテナンス性の低いコードになってしまいます。',
        '</p>',

        '<h2>モジュールの作成</h2>',
        '<p>',
        'モジュールは、<em>modules</em>ディレクトリに配置します。',
        '</p>',

        '<h4>modules/logic.js</h4>',
        '<pre>',
        'module.exports = {' + "\n",
        '    useTable: <span style="color:#000099;">false</span>,' + "\n",
        '    member1: <span style="color:#000099;">function</span>() {' + "\n",
        '        <span style="color:#000099;">return</span> <span style="color:#009900;">\'Call logic.member1.\'</span>;' + "\n",
        '    },' + "\n",
        '    member2: <span style="color:#000099;">function</span>() {' + "\n",
        '        <span style="color:#000099;">return</span> <span style="color:#009900;">\'Call logic.member2.\'</span>;' + "\n",
        '    }' + "\n",
        '};',
        '</pre>',

        '<p>',
        'アクションのように、<em>module.exports</em>にオブジェクトリテラルで定義します。',
        '<em>userTable:false</em>については、ここではおまじないだと思ってください。',
        '</p>',

        '<h2>アクションでのモジュール設定</h2>',
        '<p>',
        'モジュールの定義は終わりました。<em>logic</em>というモジュールが配置されています。',
        'このモジュールを利用したいアクションで使うことを宣言します。',
        'モジュール利用宣言は、<em>uses</em>キーに配列で設定します。',
        'usesで設定を行うと、this[モジュール名]でアクセスすることができるようになり、',
        'ここでは、logicモジュールのメンバーを呼び出すことができます。',
        '</p>',

        '<h4>actions/index.js</h4>',
        '<pre>',
        'module.exports = [{' + "\n",
        '    uses: [<span style="color:#009900;">\'logic\'</span>],' + "\n",
        '    execute: <span style="color:#000099;">function</span>() {' + "\n",
        '        <span style="color:#000099;">this</span>.<span style="color:#000099;">set</span>(<span style="color:#009900;">\'mod1ret\'</span>, <span style="color:#000099;">this</span>.logic.member1());' + "\n",
        '        <span style="color:#000099;">this</span>.<span style="color:#000099;">set</span>(<span style="color:#009900;">\'mod2ret\'</span>, <span style="color:#000099;">this</span>.logic.member2());' + "\n",
        '        <span style="color:#000099;">this</span>.end();' + "\n",
        '    }' + "\n",
        '}];',
        '</pre>',

        '<p>',
        'logicモジュールのメンバーは、今回同期的な処理しかないため、単純に戻り値を受け取るだけになっています。',
        'しかしながら、実際にはファイル操作やデータベース操作を行うと、コールバック関数を利用して非同期に処理する必要がでてきます。',
        'その場合は、モジュールメソッドの引数にコールバック関数を設定し、モジュールメソッド側で処理終了時にコールバック関数を呼び出すことで、',
        'アクションの処理に戻すことができます。',
        'もちろん、アクション側でthis.endなど、アクション終了を通知するメソッドを呼び出すのはコールバック関数内で処理します。',
        '</p>',

        '<h2>データベース接続</h2>',
        '<p>',
        'Next JSでデータベースへ接続するには、モジュールを利用します。',
        'モジュール名=テーブル名という考え方で、モジュールをテーブル単位のアクセスと考え操作するO/Rマッパーが実装されています。',
        '</p>',
        '<p style="color:red">',
        'バージョン0.8.1では、MySQLへの接続のみであるとともに、アソシエーションなどO/Rマッパーは実装されていませんがデータベースへのアクセスは可能です。',
        '</p>',

        '<h3>データベース接続設定</h3>',
        '<p>',
        '何はともあれ、Next JSでは、データベースへ接続する情報を直接アクションやモジュールに記述することは、',
        '直接データベースオブジェクトを操作することがない限りありません。',
        '<em>コネクション</em>という単位で接続情報を先に定義し、どのコネクションを利用してモジュールがデータベースへ接続するのかを指定します。',
        '</p>',

        '<address>Copyright &copy; 2006 - 2011 <a href="http://www.xenophy.com/">Xenophy.CO.,LTD</a> All rights Reserved.</address>',

        ].join("")
    });
